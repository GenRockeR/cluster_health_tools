<form>
  <label>Indexing performance over time</label>
  <init>
    <eval token="seconds_for_bin">if((round(relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)&lt;31,31,round(((relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)/31)*31)</eval>
  </init>
  <search id="indexer_list_search">
    <query>
| rest /services/server/info  | where server_roles="indexer"  | fields + splunk_server  | eval search="\"".splunk_server."\""  | stats values(search) as search  | eval search="host IN (".mvjoin(search, ", ").")"  | fields + search
    </query>
    <done>
      <set token="indexer_list">$result.search$</set>
    </done>
    <earliest>0</earliest>
    <latest></latest>
  </search>
  <fieldset submitButton="false">
    <input type="time" token="time">
      <label></label>
      <default>
        <earliest>-4h@m</earliest>
        <latest>now</latest>
      </default>
      <change>
        <eval token="seconds_for_bin">if((round(relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)&lt;31,31,round(((relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)/31)*31)</eval>
      </change>
    </input>
    <input type="dropdown" token="time_resolution">
      <label>Chart resolution</label>
      <choice value="100">Crude</choice>
      <choice value="250">Low</choice>
      <choice value="500">Medium</choice>
      <choice value="750">High</choice>
      <choice value="999">Ultra</choice>
      <default>500</default>
      <change>
        <eval token="seconds_for_bin">if((round(relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)&lt;31,31,round(((relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)/31)*31)</eval>
      </change>
    </input>
    <input type="checkbox" token="show_override_panel">
      <label>Show override panel</label>
      <choice value="*">Show panels</choice>
      <delimiter> </delimiter>
    </input>
  </fieldset>
  <row depends="$show_override_panel$">
    <panel>
      <input type="text" token="indexer_list">
        <label>Indexer override</label>
      </input>
      <input type="text" token="index_to_search">
        <label>Index override</label>
        <default>_internal</default>
      </input>
      <html>
This dashboard uses searches to discovery your topology, if you explicitly list your hosts here in the form "host=a OR host=b" or "host=idx*" you will activite the dashboard panels        
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>RT indexing (refreshes very 30 seconds) we want this to be mostly flat and the stdev is low</title>
      <chart>
        <title>If no data appear here is it because the user doesn't have access to the REST API</title>
        <search>
          <progress>
            <eval token="seconds_for_bin">if((round(relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)&lt;31,31,round(((relative_time(now(), $time.latest$)-relative_time(now(), $time.earliest$))/$time_resolution$)/31)*31)</eval>
          </progress>
          <query>| rest /services/server/introspection/indexer 
| sort - splunk_server 
| rename splunk_server as host
| search $indexer_list$
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| table short_name average_KBps 
| eventstats stdev(average_KBps) avg(average_KBps)</query>
          <earliest>0</earliest>
          <latest></latest>
          <refresh>30</refresh>
          <refreshType>delay</refreshType>
        </search>
        <option name="charting.chart">column</option>
        <option name="charting.chart.overlayFields">avg(average_KBps),stdev(average_KBps)</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">328</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Aggregate performance of the cluster + the stdev. We want the stdev to be very low</title>
      <chart>
        <search>
          <query>index=$index_to_search$ $indexer_list$ TERM(group=thruput) TERM(name=thruput) 
| bin span=$seconds_for_bin$sec _time 
| stats sum(instantaneous_kbps) as instantaneous_kbps by host _time 
| timechart stdev(instantaneous_kbps) avg(instantaneous_kbps) span=$seconds_for_bin$sec</query>
          <earliest>$time.earliest$</earliest>
          <latest>$time.latest$</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <selection>
          <set token="selection_earliest">$start$</set>
          <set token="selection_latest">$end$</set>
          <eval token="drilldown_seconds_for_bin">if((round(relative_time(now(), $end$)-relative_time(now(), $start$))/500)&lt;1,1,round((relative_time(now(), $end$)-relative_time(now(), $start$))/500))</eval>
        </selection>
        <option name="charting.axisLabelsX.majorLabelStyle.overflowMode">ellipsisNone</option>
        <option name="charting.axisLabelsX.majorLabelStyle.rotation">0</option>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisTitleY2.visibility">visible</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.axisY2.enabled">0</option>
        <option name="charting.axisY2.scale">inherit</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.bubbleMaximumSize">50</option>
        <option name="charting.chart.bubbleMinimumSize">10</option>
        <option name="charting.chart.bubbleSizeBy">area</option>
        <option name="charting.chart.nullValueMode">gaps</option>
        <option name="charting.chart.showDataLabels">none</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">default</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.layout.splitSeries">1</option>
        <option name="charting.layout.splitSeries.allowIndependentYRanges">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.placement">right</option>
        <option name="height">812</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Blocking queues on indexers, we don't want this to happen has it creates uneven load. Blocking is starting at indexing which implies not enough IO for the indexing + search load</title>
      <input type="dropdown" token="queue">
        <label>Select blocking queue</label>
        <choice value="aeq">aeq</choice>
        <choice value="aggqueue">aggqueue</choice>
        <choice value="aq">aq</choice>
        <choice value="auditqueue">auditqueue</choice>
        <choice value="exec">exec</choice>
        <choice value="fschangemanager_queue">fschangemanager_queue</choice>
        <choice value="indexqueue">indexqueue</choice>
        <choice value="nullqueue">nullqueue</choice>
        <choice value="parsingqueue">parsingqueue</choice>
        <choice value="splunktcpin">splunktcpin</choice>
        <choice value="stashparsing">stashparsing</choice>
        <choice value="structuredparsingqueue">structuredparsingqueue</choice>
        <choice value="tcpin_queue">tcpin_queue</choice>
        <choice value="typingqueue">typingqueue</choice>
        <default>indexqueue</default>
      </input>
      <chart>
        <search>
          <query>index=$index_to_search$ $indexer_list$ TERM(name=$queue$) TERM(blocked=true) sourcetype=splunkd 
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| timechart span=$seconds_for_bin$sec limit=0 count by short_name 
| foreach * 
    [| eval &lt;&lt;FIELD&gt;&gt;=if('&lt;&lt;FIELD&gt;&gt;'=0,0,1)]</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="charting.axisLabelsX.majorLabelStyle.overflowMode">ellipsisNone</option>
        <option name="charting.axisLabelsX.majorLabelStyle.rotation">0</option>
        <option name="charting.axisTitleX.visibility">visible</option>
        <option name="charting.axisTitleY.visibility">visible</option>
        <option name="charting.axisTitleY2.visibility">visible</option>
        <option name="charting.axisX.scale">linear</option>
        <option name="charting.axisY.scale">linear</option>
        <option name="charting.axisY2.enabled">0</option>
        <option name="charting.axisY2.scale">inherit</option>
        <option name="charting.chart">column</option>
        <option name="charting.chart.bubbleMaximumSize">50</option>
        <option name="charting.chart.bubbleMinimumSize">10</option>
        <option name="charting.chart.bubbleSizeBy">area</option>
        <option name="charting.chart.nullValueMode">gaps</option>
        <option name="charting.chart.showDataLabels">none</option>
        <option name="charting.chart.sliceCollapsingThreshold">0.01</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.chart.style">shiny</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.layout.splitSeries">0</option>
        <option name="charting.layout.splitSeries.allowIndependentYRanges">0</option>
        <option name="charting.legend.labelStyle.overflowMode">ellipsisMiddle</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">632</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <chart>
        <title>Indexing delay of the indexers internal logs, should be about 2-5 seconds when healthy</title>
        <search>
          <query>index=$index_to_search$ $indexer_list$
    sourcetype=splunkd source="*metrics.log" 
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| eval indexing_delay=_indextime-_time 
| eval _time=_indextime 
| timechart limit=0 span=$seconds_for_bin$sec max(indexing_delay) by short_name</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
        </search>
        <search base="annotation" type="annotation"></search>
        <option name="charting.axisY.scale">log</option>
        <option name="charting.chart">line</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">653</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Number of connections coming into the indexers, this needs to be high for good statistical randomness</title>
      <chart>
        <search>
          <query>index=$index_to_search$ $indexer_list$ TERM(eventtype=connect_done) 
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| timechart limit=0 span=$seconds_for_bin$sec count by short_name 
| eval sum=0 
| foreach * 
    [| eval sum=if(isnull('&lt;&lt;FIELD&gt;&gt;'),sum,sum+'&lt;&lt;FIELD&gt;&gt;')]</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
        </search>
        <search base="annotation" type="annotation"></search>
        <option name="charting.axisY2.enabled">1</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.overlayFields">sum</option>
        <option name="charting.chart.stackMode">stacked</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">538</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>HEC event distribution across indexers</title>
      <input type="dropdown" token="selected_hec_metric">
        <label>Selected HEC metric</label>
        <choice value="data.num_of_events">num_of_events</choice>
        <choice value="data.total_bytes_indexed">total_bytes_indexed</choice>
        <choice value="data.total_bytes_received">total_bytes_received</choice>
        <default>data.num_of_events</default>
      </input>
      <chart>
        <title>Select window and indexer to drill in</title>
        <search>
          <query>| tstats sum($selected_hec_metric$) as events where $indexer_list$ index=_introspection data.series::http_event_collector by host _time span=$seconds_for_bin$sec
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| eval label=short_name." (".instance_type."+".os_version.")"
| eval label=short_name
| xyseries _time short_name events</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
        </search>
        <search base="annotation" type="annotation"></search>
        <option name="charting.chart">line</option>
        <option name="charting.drilldown">none</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">377</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Metrics reading frequency, should be generated every 30 seconds when heathy</title>
      <chart>
        <search>
          <query>| tstats count where index=$index_to_search$ $indexer_list$ sourcetype=splunkd TERM(name=thruput) (TERM(group=thruput) NOT(TERM(ingest_pipe*)) OR (TERM(ingest_pipe=0))) 
    by _time host span=$seconds_for_bin$sec 
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| timechart limit=0 sum(count) as readings span=$seconds_for_bin$sec by short_name 
| eval active_indexers=0 
| foreach * 
    [| eval active_indexers=if(isnull('&lt;&lt;FIELD&gt;&gt;') OR "&lt;&lt;FIELD&gt;&gt;"="active_indexers",active_indexers,active_indexers+1)]</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
        </search>
        <search base="annotation" type="annotation"></search>
        <option name="charting.axisY.minimumNumber">0</option>
        <option name="charting.axisY2.enabled">1</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.overlayFields">active_indexers</option>
        <option name="charting.drilldown">none</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">425</option>
        <option name="refresh.display">progressbar</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Introspection metrics</title>
      <input type="dropdown" token="hostwide_parameter">
        <label>Selection hostwide variable function</label>
        <choice value="cpu_idle_pct">cpu_idle_pct</choice>
        <choice value="cpu_system_pct">cpu_system_pct</choice>
        <choice value="cpu_user_pct">cpu_user_pct</choice>
        <choice value="mem">mem</choice>
        <choice value="mem_used">mem_used</choice>
        <choice value="normalized_load_avg_1min">normalized_load_avg_1min</choice>
        <choice value="pg_paged_out">pg_paged_out</choice>
        <choice value="pg_swapped_out">pg_swapped_out</choice>
        <choice value="runnable_process_count">runnable_process_count</choice>
        <choice value="swap">swap</choice>
        <choice value="swap_used">swap_used</choice>
        <default>cpu_idle_pct</default>
      </input>
      <input type="dropdown" token="hostwide_aggregation_function">
        <label>Selection aggregation function</label>
        <choice value="avg">average</choice>
        <choice value="median">median</choice>
        <choice value="mean">mean</choice>
        <choice value="stdev">standard dev</choice>
        <choice value="per_second">per_second</choice>
        <choice value="p90">p90</choice>
        <choice value="p95">p95</choice>
        <choice value="p99">p99</choice>
        <choice value="max">max</choice>
        <choice value="min">min</choice>
        <choice value="sum">sum</choice>
        <choice value="range">range</choice>
        <choice value="var">variance</choice>
        <default>avg</default>
      </input>
      <input type="dropdown" token="overlay_option">
        <label>Overlay options for stdev</label>
        <choice value="| eval sum=0, count=0  | foreach idx*      [| eval sum=sum+'&lt;&lt;FIELD&gt;&gt;', count=count+1]  | eval avg=sum/count  | foreach idx*      [| eval variance=pow(avg-'&lt;&lt;FIELD&gt;&gt;',2)]  | eval stdev=sqrt(variance/count)  | fields - variance sum count avg">ON - with gaps</choice>
        <choice value="| eval sum=0, count=0  | foreach idx*      [| eval sum=if(isnull('&lt;&lt;FIELD&gt;&gt;'),sum,sum+'&lt;&lt;FIELD&gt;&gt;'), count=if(isnull('&lt;&lt;FIELD&gt;&gt;'),count,count+1)] | eval avg=sum/count  | foreach idx*      [| eval variance=if(isnull('&lt;&lt;FIELD&gt;&gt;'),variance,pow(avg-'&lt;&lt;FIELD&gt;&gt;',2))]  | eval stdev=sqrt(variance/count)  | fields - variance sum count avg">ON - no gaps</choice>
        <choice value="| noop">OFF</choice>
        <default>| noop</default>
      </input>
      <chart>
        <title>Introspection for hostwide $hostwide_parameter$ $hostwide_aggregation_function$ (sampling very $seconds_for_bin$ seconds)</title>
        <search>
          <query>| tstats 
    $hostwide_aggregation_function$(data.cpu_idle_pct) as cpu_idle_pct 
    $hostwide_aggregation_function$(data.cpu_user_pct) as cpu_user_pct 
    $hostwide_aggregation_function$(data.cpu_system_pct) as cpu_system_pct 
    $hostwide_aggregation_function$(data.mem) as mem 
    $hostwide_aggregation_function$(data.mem_used) as mem_used 
    $hostwide_aggregation_function$(data.normalized_load_avg_1min) as normalized_load_avg_1min 
    $hostwide_aggregation_function$(data.pg_paged_out) as pg_paged_out 
    $hostwide_aggregation_function$(data.pg_swapped_out) as pg_swapped_out
    $hostwide_aggregation_function$(data.runnable_process_count) as runnable_process_count 
    $hostwide_aggregation_function$(data.swap) as swap 
    $hostwide_aggregation_function$(data.swap_used) as swap_used 
    where index=_introspection $indexer_list$ by host _time span=$seconds_for_bin$sec 
| rex field=host "^(?&lt;short_name&gt;[^\.]+)" 
| eval label=short_name." (".instance_type."+".os_version.")"
| eval label=short_name
| xyseries _time short_name $hostwide_parameter$
$overlay_option$</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
        </search>
        <search base="annotation" type="annotation"></search>
        <option name="charting.axisY.minimumNumber">0</option>
        <option name="charting.axisY2.enabled">1</option>
        <option name="charting.chart">line</option>
        <option name="charting.chart.overlayFields">stdev</option>
        <option name="charting.drilldown">all</option>
        <option name="charting.legend.placement">top</option>
        <option name="height">389</option>
        <option name="refresh.display">progressbar</option>
        <drilldown>
          <set token="selected_shortname_blocked">$click.name2$</set>
        </drilldown>
      </chart>
    </panel>
  </row>
  <row depends="$never_show$">
    <panel>
      <title>annotation</title>
      <table>
        <search id="annotation">
          <query>| multisearch 
    [ search index=_internal host=*.*.splunkcloud.com sourcetype=splunkd INFO component=loader splunkd starting build punct::--_::._+____-___\(_\). 
    | eval column="started" ] 
    [ search index=_internal host=*.*.splunkcloud.com sourcetype=splunkd INFO ServerConfig my newly generated GUID is punct::--_::._+____-______---- 
    | eval column="new" ] 
    [ search index=_internal host=*.*.splunkcloud.com sourcetype=splunkd INFO Shutdownhandler Shutting down splunkd punct::--_::._+____-___ 
    | eval column="shutdown" ] 
    [ search index=_internal host=*.*.splunkcloud.com sourcetype=splunkd_crash_log build NOT Process NOT renamed CLOCK_MONOTONIC 
    | eval column="crash" ] 
| fields + _time host column 
| appendpipe 
    [| transaction startswith=(column="oom" OR column="crash" OR column="shutdown" OR column="new") endswith=(column="started") by host 
    | eval column=mvjoin(column,"-&gt;"), 
        _time=_time+duration] 
| where column!="started" 
| eval annotation_label=host, annotation_category=column</query>
          <earliest>$selection_earliest$</earliest>
          <latest>$selection_latest$</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">20</option>
        <option name="dataOverlayMode">none</option>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="rowNumbers">false</option>
        <option name="totalsRow">false</option>
        <option name="wrap">true</option>
      </table>
    </panel>
  </row>
</form>
